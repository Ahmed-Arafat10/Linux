~ String Proccessing:
inside /etc/passwd
-> username:password:UID:GID:comment:homepath:terminalpath
    [:] Called separator(delimiter)

    - Count charecters in a file
    $ wc <FileName>
    ex:$ wc /etc/passwd
    O/P: 47 82 2783 /etc/passwd
        Line Word Charecter respectively

    $ wc -c -l -w /etc/passwd
    c-> Charecter
    l-> Line
    w-> Word

    - Search for lines that contain a specifc text in a file
    $ grep <TextToSearch> <FileName>
    ex: grep ahmed /etc/passwd
     - Search for lines that {starts} with a specifc text in a file
    ex: grep ^ahmed /etc/passwd

     - Search for lines that {ends} with a specifc text in a file
    ex: grep ahmed$ /etc/passwd


     - Search for lines that contain a specifc insenstive text in a file
    ex: grep -i ahmed /etc/passwd
        -> -i for insenstive , it may be Ahmed or ahmed

        -Search for lines that contain a specifc text in all files in Cur. Dir.
        $ grep -r Dir1

    - Search for lines that {Do not} contain a specifc text in a file
    $ grep -v ahmed /etc/passwd
        -> Invert (Not Contains)
        -> Work also with [-r] (folders)



    -To sort lines in a files
    $ sort -T: -k -n <FileName>
    -> -T: Means that separator is [:]
    -> -k Number of Field to sort with
    -> -n TO treat field as a No. if it;s a No. not as string (ASCII) {1 Not '1'}
    ex:  $ sort -T: -k3 -n /etc/passwd

    Note: add [-r] flag to reverse sort
    Note-> sort dosent change file, it just changes output (how its shown in terminal)

    $ sort -T: -k1 -n /etc/passwd > sortedGroup.txt
    -> save output of first command as a text in file called sortedGroup.txt

    - Show only first,third (for example) fields for each line
    $ cut -d: -f1,2,3,--- <FileName>
    ex: $ cut -d: -f 1,3 /etc/group

    - Just Print text in terminal
    $ echo hello world

    - Save text in a file
    $ echo hello world > fil1.txt

    ~ Piping & Redirection:

    $ ls /etc | more
    $ ls /etc | grep passwd
    -> [|] pipe charecter

    -> its like executing first command and save its output in file insted of showing in in terminal
    then passing this file to second command after pipe charecter [|]


    $ sudo ls -R / | grep shadow
    -> -R / Means to show all files/Dir. inside root [/] and also inside each dir.
    show its files/dir and so on , so it outputs all files/Dir. in pc
    -> sudo : means {super user do}

    -'Tee' reads the standard input and writes it to both the standard output (terminal) and save output a file
    to save output in a a file + showing output in terminal (if I want)
    -it shows output + saving putpt in a file
    $ ls /etc |tee file.txt

    Examples:
    $ ls /etc | tee etc_content.txt
    $ cat /etc/passwd | grep ^ahmed |tee file.txt | wc -l       O/P: 1
    -command are like water running in a pipe

    ~ Redirection :

    - Save text in a file (Override its content)
    $ echo arafat > fil1.txt
    - Concat (append) text in a file {in new line} as str = str+text
    $ echo is my best friend >> file1.txt
    $ cat file1.txt
    O/P: arafat
        is my best friend  {in new line}

        -It only save errors in err_file instead of printing it + printing other pathes files (which dont have errors)
        so, its redirecting error in a file instead of printing them
        $ ls /fooo 2> err_file

        - Concate (append) text in a file {in new line} as str = str+text but for redirecting error
        $ ls /fooo 2>> err_file

        - Will only print errors and save rest in fileX.txt , redirecting standart output (terminal)
        $ ls / > fileX.txt

        - will redirect both standard errors and standard output
        $ ls > fileX.txt 2>&1
        1 -> standart output
        2 -> standard error
        & between them

        Note: [>] is same as [1>]



        $ mail -s "Subject" arafat@gmail.com < FileName
        -> [<] called standard input redirection
        -> means that you take text in FileName as an input for command
        -> FileName contains body of mail (instead of writing body in command)
        -> Install its package first


        ~VI Editor:
        -> Only editor available in rescue mode (as safe mode in windows)

        $vi file.txt


        hit [i] to enter insert mode
        hit [esc] to enter command mode

        in command mode:
        :q! -> to Quit
        :wq! -> to Write and then quite
        :w! -> to Write (save)
        You can use up/down/right/left buttons in command mode
        in command mode:
        hit [dd] -> to cut a line
        hit [pp] -> to copy a line
        hit [p OR P] -> to paste copied line, small p to put copied line under cur line and big P to put it above
        hit [D] -> Delete a line (from cursor to end of line)  H[e]llo wolrd -> H
        :n,nd -> Delete Range of lines
        :%d -> Delete all lines
        /text -> to highlight text in file
        hit [enter] then [n]down or [N]up to traverse along highlighted text

        :set nu -> To show number of lines
        1
        2
        3
        :set nonu -> to hide number of lines


        ~Enviroment Variables:

        $ x = arafat
        $ echo $x           O/P: arafat

        echo $PWD       O/P: /home/arafat/Document
        echo $USER      O/P: arafat
        echo $SHELL     O/P: /bin/bash
        -> For type of shell, its bash here
        -> bash : means born against shell


        $ export CURRENT_USER = arafat
        -> export is used to create enviroment variables , best practics is to name it with upper case

        $ echo CURRENT_USER

        $ env USER (X)   WRONG

        $ printev current_user -> no need to $ sign

        Note:this is only for current ter,inal (not permenant), to solve this save it in intialization files ~/.bashrc

        $ nano ~/.bashrc {save it here}

        - To execute it or just close all terminals (as you are reloading page in web so changes can take place)
        $ source ~/.bashrc

       - To print all enviroment variables

        $ printev
        OR
        $ ev

        - To remove variable

        $ unset <VariableName>
        ex: $ unset CURRENT_USER


        ~ Command Quoting:

        $ echo $PWD   --> will print path
        $ echo  "$PWD" --> will print path
        $ echo  '$PWD' --> will print [$PWD] as text
                -> single quote ignores all metacharecter
        $ echo  '\$PWD' --> will print [\$PWD] as text
        $ echo" \$PWD" --> will print [$PWD] as text
                -> Double quotes ignorees next metacharecter
        $ echo "Today date is" $(date)
        $ rm -r $(ls) = rm -r *

        $ history
        -> All commands written by you is saved in ~\.bash.history
        $ !! -> execute previous command
        $ !n -> ex: !350 -> execute command No. 350 in history
        $ !-n -> ex: !-2 -> previous previous Command (n Times)
        $ alias q = "ls -a"
        -> Rememeber not permenant, save it in ~/.bashrc to become permenant
        $ q         -> Execute alias
        Note: if you name it foe example as [ls], yhen it will execute it not defauled [ls] command, to fix
        it instead of closing terminal use [\ls] backslash ls



